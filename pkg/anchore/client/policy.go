/*
 * Anchore Engine API Server
 *
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * API version: 0.1.9
 * Contact: nurmi@anchore.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package client

import (
	"time"
)

type Policy struct {

	Id string `json:"id"`

	Name string `json:"name,omitempty"`

	Comment string `json:"comment,omitempty"`

	Version string `json:"version"`

	Rules []PolicyRule `json:"rules,omitempty"`
}


// A bundle containing a set of policies, whitelists, and rules for mapping them to specific images
type PolicyBundle struct {

	// Id of the bundle
	Id string `json:"id"`

	// Human readable name for the bundle
	Name string `json:"name,omitempty"`

	// Description of the bundle, human readable
	Comment string `json:"comment,omitempty"`

	// Version id for this bundle format
	Version string `json:"version"`

	// Whitelists which define which policy matches to disregard explicitly in the final policy decision
	Whitelists []Whitelist `json:"whitelists,omitempty"`

	// Policies which define the go/stop/warn status of an image using rule matches on image properties
	Policies []Policy `json:"policies"`

	// Mapping rules for defining which policy and whitelist(s) to apply to an image based on a match of the image tag or id. Evaluated in order.
	Mappings []MappingRule `json:"mappings"`

	// List of mapping rules that define which images should always be passed (unless also on the blacklist), regardless of policy result.
	WhitelistedImages []ImageSelectionRule `json:"whitelisted_images,omitempty"`

	// List of mapping rules that define which images should always result in a STOP/FAIL policy result regardless of policy content or presence in whitelisted_images
	BlacklistedImages []ImageSelectionRule `json:"blacklisted_images,omitempty"`
}


// List of PolicyBundleRecord objects
type PolicyBundleList []PolicyBundleRecord

// A policy bundle plus some metadata
type PolicyBundleRecord struct {

	CreatedAt time.Time `json:"created_at,omitempty"`

	LastUpdated time.Time `json:"last_updated,omitempty"`

	// The bundle's identifier
	PolicyId string `json:"policyId,omitempty"`

	// True if the bundle is currently defined to be used automatically
	Active bool `json:"active,omitempty"`

	// UserId of the user that owns the bundle
	UserId string `json:"userId,omitempty"`

	// Source location of where the policy bundle originated
	PolicySource string `json:"policy_source,omitempty"`

	Policybundle *PolicyBundle `json:"policybundle,omitempty"`
}

// Evaluation response object, loosely defined due to variable keys (the image id is a key in the json)
type PolicyEvaluation map[string]map[string][]map[string]interface{}

// Evaluation response object
type PolicyEvaluationList []PolicyEvaluation

// A rule that defines and decision value if the match is found true for a given image.
type PolicyRule struct {

	Id string `json:"id,omitempty"`

	Gate string `json:"gate"`

	Trigger string `json:"trigger"`

	Action string `json:"action"`

	Params []PolicyRuleParams `json:"params,omitempty"`
}

type PolicyRuleParams struct {

	Name string `json:"name"`

	Value string `json:"value"`
}

type MappingRule struct {

	Id string `json:"id,omitempty"`

	Name string `json:"name"`

	WhitelistIds []string `json:"whitelist_ids,omitempty"`

	// Optional single policy to evalute, if set will override any value in policy_ids, for backwards compatibility. Generally, policy_ids should be used even with a array of length 1.
	PolicyId string `json:"policy_id,omitempty"`

	// List of policyIds to evaluate in order, to completion
	PolicyIds []string `json:"policy_ids,omitempty"`

	Registry string `json:"registry"`

	Repository string `json:"repository"`

	Image *ImageRef `json:"image"`
}


type TriggerParamSpec struct {

	// Parameter name as it appears in policy document
	Name string `json:"name,omitempty"`

	Description string `json:"description,omitempty"`

	// An example value for the parameter (encoded as a string if the parameter is an object or list type)
	Example string `json:"example,omitempty"`

	// State of the trigger parameter
	State string `json:"state,omitempty"`

	// The name of another trigger that supercedes this on functionally if this is deprecated
	SupercededBy string `json:"superceded_by,omitempty"`

	// Is this a required parameter or optional
	Required bool `json:"required,omitempty"`

	// If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.
	Validator *interface{} `json:"validator,omitempty"`
}

// Definition of a trigger and its parameters
type TriggerSpec struct {

	// Name of the trigger as it would appear in a policy document
	Name string `json:"name,omitempty"`

	// Trigger description for what it tests and when it will fire during evaluation
	Description string `json:"description,omitempty"`

	// State of the trigger
	State string `json:"state,omitempty"`

	// The name of another trigger that supercedes this on functionally if this is deprecated
	SupercededBy string `json:"superceded_by,omitempty"`

	// The list of parameters that are valid for this trigger
	Parameters []TriggerParamSpec `json:"parameters,omitempty"`
}

// A collection of whitelist items to match a policy evaluation against.
type Whitelist struct {

	Id string `json:"id"`

	Name string `json:"name,omitempty"`

	Version string `json:"version"`

	Comment string `json:"comment,omitempty"`

	Items []WhitelistItem `json:"items,omitempty"`
}

// Identifies a specific gate and trigger match from a policy against an image and indicates it should be ignored in final policy decisions
type WhitelistItem struct {

	Id string `json:"id,omitempty"`

	Gate string `json:"gate"`

	TriggerId string `json:"trigger_id"`
}


type ImageSelectionRule struct {

	Id string `json:"id,omitempty"`

	Name string `json:"name"`

	Registry string `json:"registry"`

	Repository string `json:"repository"`

	Image *ImageRef `json:"image"`
}

// A description of the set of gates available in this engine and the triggers and parameters supported
type GateSpec struct {

	// Gate name, as it would appear in a policy document
	Name string `json:"name,omitempty"`

	// Description of the gate
	Description string `json:"description,omitempty"`

	// State of the gate and transitively all triggers it contains if not 'active'
	State string `json:"state,omitempty"`

	// The name of another trigger that supercedes this on functionally if this is deprecated
	SupercededBy string `json:"superceded_by,omitempty"`

	// List of the triggers that can fire for this Gate
	Triggers []TriggerSpec `json:"triggers,omitempty"`
}
